(mod
  (
    START_HEIGHT
    RATE_AMOUNT
    INTERVAL_TIME
    WITHDRAWN_AMOUNT
    INNER_PUZZLE
    Truths
    current_height
    inner_solution
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)
  (include sha256tree.clib)
  (include singleton_truths.clib)
  (include utility_functions.clib) ; or, assert, and

  (defun-inline coin_amount (condition) (f (r (r condition))))
  (defun-inline puzzle_hash (condition) (f (r condition)))

  (defun-inline >= (a b)
    (or (> a b)
        (= a b)
    )
  )

  (defun-inline morph_singleton_condition
    (
      singleton_condition
      MOD_HASH
      START_HEIGHT
      RATE_AMOUNT
      INTERVAL_TIME
      new_withdrawn_amount
    )

    (list
      CREATE_COIN
      (puzzle_hash_of_curried_function MOD_HASH
        (puzzle_hash singleton_condition)
        (sha256 1 new_withdrawn_amount)
        (sha256 1 INTERVAL_TIME)
        (sha256 1 RATE_AMOUNT)
        (sha256 1 START_HEIGHT)
      )
      (coin_amount singleton_condition)
    )
  )


  (defun-inline assert_rate (START_HEIGHT RATE_AMOUNT INTERVAL_TIME current_height new_withdrawn_amount)
    (assert
      ; RATE_AMOUNT/INTERVAL_TIME >= (WITHDRAWN_AMOUNT + spent_amount)/(current_height - START_HEIGHT) (cross multiplied)
      (>= (* RATE_AMOUNT (- current_height START_HEIGHT)) (* new_withdrawn_amount INTERVAL_TIME))
      (list ASSERT_HEIGHT_ABSOLUTE current_height)
    )
  )

  (defun-inline generate_final_conditions
    (
      singleton_condition
      remaining_conditions
      new_withdrawn_amount
      MOD_HASH
      START_HEIGHT
      RATE_AMOUNT
      INTERVAL_TIME
      current_height
    )
    (c
      (assert_rate START_HEIGHT RATE_AMOUNT INTERVAL_TIME current_height new_withdrawn_amount)
      (c
        (morph_singleton_condition singleton_condition MOD_HASH START_HEIGHT RATE_AMOUNT INTERVAL_TIME new_withdrawn_amount)
        remaining_conditions
      )
    )
  )

  (defun-inline calculate_new_withdrawn_amount (WITHDRAWN_AMOUNT delta_amount)
    (+
      WITHDRAWN_AMOUNT
      (if (> 0 delta_amount) 0 delta_amount) ; We don't add negative deltas (contributions) to the WITHDRAWN_AMOUNT
    )
  )

  (defun found_singleton
    (
      singleton_condition
      remaining_conditions
      (
        MOD_HASH
        START_HEIGHT
        RATE_AMOUNT
        INTERVAL_TIME
        WITHDRAWN_AMOUNT
        current_height
        my_amount
      )
    )
    (generate_final_conditions
      singleton_condition
      remaining_conditions
      (calculate_new_withdrawn_amount WITHDRAWN_AMOUNT (- my_amount (coin_amount singleton_condition)))
      MOD_HASH
      START_HEIGHT
      RATE_AMOUNT
      INTERVAL_TIME
      current_height
    )
  )


  (defun search_for_singleton (conditions args)
    (if conditions
        (if (and
              (= (f (f conditions)) CREATE_COIN)      ; this is a CREATE_COIN
              (logand (coin_amount (f conditions)) 1) ; the amount is odd
            )
            ; (f conditions)
            (found_singleton (f conditions) (r conditions) args)
            (c
              (f conditions)
              (search_for_singleton (r conditions) args)
            )
        )
        (x)
    )
  )

  ; main
  (search_for_singleton
    (a INNER_PUZZLE inner_solution)
    (list
      MOD_HASH
      START_HEIGHT
      RATE_AMOUNT
      INTERVAL_TIME
      WITHDRAWN_AMOUNT
      current_height
      (my_amount_truth Truths)
    )
  )
)
