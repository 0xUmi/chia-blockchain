(mod
  (
    MOD_HASH
    RATE_AMOUNT
    INTERVAL_TIME
    EARNINGS_CAP
    CREDIT
    INNER_PUZZLE
    Truths
    time_passed
    inner_solution
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)
  (include sha256tree.clib)
  (include singleton_truths.clib)
  (include singleton_finder.clib)
  (include utility_functions.clib) ; or, assert, and

  (defun-inline coin_amount (condition) (f (r (r condition))))
  (defun-inline puzzle_hash (condition) (f (r condition)))

  (defun-inline >= (a b)
    (or (> a b)
        (= a b)
    )
  )

  (defun min (a b)
    (if (> a b)
      b
      a
    )
  )

  (defun max (a b)
    (if (> a b)
      a
      b
    )
  )

  (defun-inline morph_singleton_condition
    (
      singleton_condition
      MOD_HASH
      RATE_AMOUNT
      INTERVAL_TIME
      EARNINGS_CAP
      new_credit
    )

    (c
      CREATE_COIN
      (c
        (puzzle_hash_of_curried_function MOD_HASH
          (puzzle_hash singleton_condition)
          (sha256 1 new_credit)
          (sha256 1 EARNINGS_CAP)
          (sha256 1 INTERVAL_TIME)
          (sha256 1 RATE_AMOUNT)
          (sha256 1 MOD_HASH)
        )
        (r (r singleton_condition))
      )
    )
  )


  (defun-inline assert_rate (EARNINGS_CAP possible_withdrawal_amount withdrawal_amount time_passed)
    (assert
      (>= EARNINGS_CAP withdrawal_amount)
      (>= possible_withdrawal_amount withdrawal_amount)
      (list ASSERT_HEIGHT_RELATIVE time_passed)
    )
  )

  (defun-inline calculate_possible_withdrawal (RATE_AMOUNT INTERVAL_TIME CREDIT time_passed)
    (+ (* (max 0 time_passed) (/ RATE_AMOUNT INTERVAL_TIME)) CREDIT)
  )

  (defun generate_final_conditions
    (
      singleton_condition
      remaining_conditions
      withdrawal_amount
      possible_withdrawal_amount
      MOD_HASH
      RATE_AMOUNT
      INTERVAL_TIME
      EARNINGS_CAP
      time_passed
    )

    (c
      (assert_rate EARNINGS_CAP possible_withdrawal_amount withdrawal_amount time_passed)
      (c
        (morph_singleton_condition
          singleton_condition
          MOD_HASH
          RATE_AMOUNT
          INTERVAL_TIME
          EARNINGS_CAP
          (- (min possible_withdrawal_amount EARNINGS_CAP) withdrawal_amount)
        )
        remaining_conditions
      )
    )
  )

  (defun found_singleton
    (
      singleton_condition
      remaining_conditions
      (
        MOD_HASH
        RATE_AMOUNT
        INTERVAL_TIME
        EARNINGS_CAP
        CREDIT
        time_passed
        my_amount
      )
    )

    (generate_final_conditions
      singleton_condition
      remaining_conditions
      (max (- my_amount (coin_amount singleton_condition)) 0)
      (calculate_possible_withdrawal RATE_AMOUNT INTERVAL_TIME CREDIT time_passed)
      MOD_HASH
      RATE_AMOUNT
      INTERVAL_TIME
      EARNINGS_CAP
      time_passed
    )
  )

  ; main
  (search_for_singleton
    (a INNER_PUZZLE (c Truths inner_solution))
    found_singleton
    (list
      MOD_HASH
      RATE_AMOUNT
      INTERVAL_TIME
      EARNINGS_CAP
      CREDIT
      time_passed
      (my_amount_truth Truths)
    )
  )
)
