name: test

on:
  push:
    branches:
      - main
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  get_configuration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Find test paths
        id: get_configuration
        run: |
          echo ::set-output name=configuration::$(python tests/build-job-matrix.py --per directory --verbose)

    outputs:
      configuration: ${{ steps.get_configuration.outputs.configuration }}

  test:
    # Should match JOB_NAME below
    name: ${{ matrix.configuration.name }} ${{ matrix.os.emoji }} ${{ matrix.python.name }}
    needs: get_configuration
    runs-on: ${{ matrix.os.runs-on }}
    timeout-minutes: ${{ matrix.configuration.job_timeout }}
    strategy:
      fail-fast: false
      matrix:
        configuration: ${{ fromJson(needs.get_configuration.outputs.configuration) }}
        os:
          - emoji: üçé
            matrix: macos
            name: macOS
            runs-on: macos-latest
          - emoji: üêß
            matrix: ubuntu
            name: Ubuntu
            runs-on: ubuntu-latest
#          - emoji: ü™ü
#            matrix: windows
#            name: Windows
#            runs-on: windows-latest
        python:
#          - name: '3.7'
#            action: '3.7'
#            apt: '3.7'
#            install_sh: '3.7'
#            matrix: '3.7'
#          - name: '3.8'
#            action: '3.8'
#            apt: '3.8'
#            install_sh: '3.8'
#            matrix: '3.8'
          - name: '3.9'
            action: '3.9'
            apt: '3.9'
            install_sh: '3.9'
            matrix: '3.9'
        exclude:
          - os:
              matrix: macos
            python:
              matrix: '3.7'

    env:
      # Should match name above
      # TODO: or maybe not quite?
      JOB_NAME: ${{ matrix.configuration.name }}_${{ matrix.os.name }}_${{ matrix.python.name }}

    steps:
      - name: Cancel previous runs on the same branch
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python.action }}

      - name: Create keychain for CI use
        if: matrix.os.matrix == 'macos'
        run: |
          security create-keychain -p foo chiachain
          security default-keychain -s chiachain
          security unlock-keychain -p foo chiachain
          security set-keychain-settings -t 7200 -u chiachain

      - name: Cache npm
        if: matrix.os.matrix == 'ubuntu'
        uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip
        uses: actions/cache@v2.1.6
        with:
          # Note that new runners may break this https://github.com/actions/cache/issues/292
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Checkout test blocks and plots
        if: matrix.configuration.checkout_blocks_and_plots
        uses: actions/checkout@v2
        with:
          repository: 'Chia-Network/test-cache'
          path: '.chia'
          ref: '0.27.0'
          fetch-depth: 1

      - name: Link home directory
        run: |
          cd $HOME
          ln -s $GITHUB_WORKSPACE/.chia
          echo "$HOME/.chia"
          ls -al $HOME/.chia

      - name: Install ubuntu dependencies
        if: matrix.os.matrix == 'ubuntu'
        run: |
          sudo apt-get install software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install python${{ matrix.python.apt }}-venv python${{ matrix.python.apt }}-distutils git -y

      - name: Run install script (macOS)
        if: matrix.os.matrix == 'macos'
        env:
          INSTALL_PYTHON_VERSION: ${{ matrix.python.install_sh }}
          BUILD_VDF_CLIENT: "N"
        run: |
          brew install boost
          sh install.sh

      - name: Run install script (Ubuntu)
        if: matrix.os.matrix == 'ubuntu'
        env:
          INSTALL_PYTHON_VERSION: ${{ matrix.python.install_sh }}
        run: |
          sh install.sh

      - name: Install timelord
        if: matrix.configuration.install_timelord
        run: |
          . ./activate
          sh install-timelord.sh
          ./vdf_bench square_asm 400000

      - name: Install developer requirements
        run: |
          . ./activate
          # TODO: remove the psutil probably
          venv/bin/python -m pip install pytest pytest-asyncio coverage pytest-cov psutil

      - name: Test blockchain code with pytest
        run: |
          . ./activate
          venv/bin/pytest --cov=chia --cov=tests --cov-report=term-missing --cov-report=xml:coverage.xml "tests/${{ matrix.configuration.path }}" -s -v --durations 0 ${{ matrix.configuration.pytest_parallel_args }}

      - name: Coverage Processing
        run: |
          mkdir coverage_reports
          cp .coverage "coverage_reports/.coverage.${{ env.JOB_NAME }}"
          cp coverage.xml "coverage_reports/coverage.${{ env.JOB_NAME }}.xml"

      - name: Publish Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage_reports/*
          if-no-files-found: error

  coverage:
    name: Coverage - ${{ matrix.os.name }} ${{ matrix.python.name }}
    runs-on: ${{ matrix.os.runs-on }}
    needs:
      - test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os:
              name: Ubuntu
              runs-on: ubuntu-latest
            python:
              name: CPython 3.8
              action: '3.8'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Coverage
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: coverage_reports

      - name: Set up ${{ matrix.python.name }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python.action }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install coverage diff-cover

      - name: Coverage Processing
        if: always()
        run: |
          coverage combine coverage_reports/
          coverage xml -o coverage.xml

          mkdir all_coverage_report
          cp .coverage "all_coverage_report/.coverage.all"
          cp coverage.xml "all_coverage_report/coverage.all.xml"

          coverage report --fail-under=35 --ignore-errors --show-missing
          diff-cover --compare-branch=${{ fromJSON(format('[{0}, {1}]', toJSON(github.event.before), toJSON(format('origin/{0}', github.base_ref))))[github.base_ref != ''] }} coverage.xml

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: all_coverage_report/*
          if-no-files-found: error
